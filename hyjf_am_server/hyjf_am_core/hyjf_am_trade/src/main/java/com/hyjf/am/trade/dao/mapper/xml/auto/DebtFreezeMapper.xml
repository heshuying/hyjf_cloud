<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.hyjf.am.trade.dao.mapper.auto.DebtFreezeMapper" >
  <resultMap id="BaseResultMap" type="com.hyjf.am.trade.dao.model.auto.DebtFreeze" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="user_id" property="userId" jdbcType="INTEGER" />
    <result column="user_name" property="userName" jdbcType="VARCHAR" />
    <result column="user_cust_id" property="userCustId" jdbcType="VARCHAR" />
    <result column="plan_nid" property="planNid" jdbcType="VARCHAR" />
    <result column="plan_order_id" property="planOrderId" jdbcType="VARCHAR" />
    <result column="borrow_nid" property="borrowNid" jdbcType="VARCHAR" />
    <result column="order_id" property="orderId" jdbcType="VARCHAR" />
    <result column="order_date" property="orderDate" jdbcType="VARCHAR" />
    <result column="trx_id" property="trxId" jdbcType="VARCHAR" />
    <result column="unfreeze_order_id" property="unfreezeOrderId" jdbcType="VARCHAR" />
    <result column="unfreeze_order_date" property="unfreezeOrderDate" jdbcType="VARCHAR" />
    <result column="amount" property="amount" jdbcType="DECIMAL" />
    <result column="status" property="status" jdbcType="TINYINT" />
    <result column="freeze_type" property="freezeType" jdbcType="TINYINT" />
    <result column="del_flag" property="delFlag" jdbcType="TINYINT" />
    <result column="create_time" property="createTime" jdbcType="INTEGER" />
    <result column="create_user_id" property="createUserId" jdbcType="INTEGER" />
    <result column="create_user_name" property="createUserName" jdbcType="VARCHAR" />
    <result column="update_time" property="updateTime" jdbcType="INTEGER" />
    <result column="update_user_id" property="updateUserId" jdbcType="INTEGER" />
    <result column="update_user_name" property="updateUserName" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, user_id, user_name, user_cust_id, plan_nid, plan_order_id, borrow_nid, order_id, 
    order_date, trx_id, unfreeze_order_id, unfreeze_order_date, amount, `status`, freeze_type, 
    del_flag, create_time, create_user_id, create_user_name, update_time, update_user_id, 
    update_user_name
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.hyjf.am.trade.dao.model.auto.DebtFreezeExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from ht_debt_freeze
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
    <if test="limitStart >= 0" >
      limit #{limitStart} , #{limitEnd}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from ht_debt_freeze
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from ht_debt_freeze
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.hyjf.am.trade.dao.model.auto.DebtFreezeExample" >
    delete from ht_debt_freeze
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.hyjf.am.trade.dao.model.auto.DebtFreeze" >
    <selectKey resultType="java.lang.Integer" keyProperty="id" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into ht_debt_freeze (user_id, user_name, user_cust_id, 
      plan_nid, plan_order_id, borrow_nid, 
      order_id, order_date, trx_id, 
      unfreeze_order_id, unfreeze_order_date, amount, 
      `status`, freeze_type, del_flag, 
      create_time, create_user_id, create_user_name, 
      update_time, update_user_id, update_user_name
      )
    values (#{userId,jdbcType=INTEGER}, #{userName,jdbcType=VARCHAR}, #{userCustId,jdbcType=VARCHAR}, 
      #{planNid,jdbcType=VARCHAR}, #{planOrderId,jdbcType=VARCHAR}, #{borrowNid,jdbcType=VARCHAR}, 
      #{orderId,jdbcType=VARCHAR}, #{orderDate,jdbcType=VARCHAR}, #{trxId,jdbcType=VARCHAR}, 
      #{unfreezeOrderId,jdbcType=VARCHAR}, #{unfreezeOrderDate,jdbcType=VARCHAR}, #{amount,jdbcType=DECIMAL}, 
      #{status,jdbcType=TINYINT}, #{freezeType,jdbcType=TINYINT}, #{delFlag,jdbcType=TINYINT}, 
      #{createTime,jdbcType=INTEGER}, #{createUserId,jdbcType=INTEGER}, #{createUserName,jdbcType=VARCHAR}, 
      #{updateTime,jdbcType=INTEGER}, #{updateUserId,jdbcType=INTEGER}, #{updateUserName,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.hyjf.am.trade.dao.model.auto.DebtFreeze" >
    <selectKey resultType="java.lang.Integer" keyProperty="id" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into ht_debt_freeze
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="userId != null" >
        user_id,
      </if>
      <if test="userName != null" >
        user_name,
      </if>
      <if test="userCustId != null" >
        user_cust_id,
      </if>
      <if test="planNid != null" >
        plan_nid,
      </if>
      <if test="planOrderId != null" >
        plan_order_id,
      </if>
      <if test="borrowNid != null" >
        borrow_nid,
      </if>
      <if test="orderId != null" >
        order_id,
      </if>
      <if test="orderDate != null" >
        order_date,
      </if>
      <if test="trxId != null" >
        trx_id,
      </if>
      <if test="unfreezeOrderId != null" >
        unfreeze_order_id,
      </if>
      <if test="unfreezeOrderDate != null" >
        unfreeze_order_date,
      </if>
      <if test="amount != null" >
        amount,
      </if>
      <if test="status != null" >
        `status`,
      </if>
      <if test="freezeType != null" >
        freeze_type,
      </if>
      <if test="delFlag != null" >
        del_flag,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="createUserId != null" >
        create_user_id,
      </if>
      <if test="createUserName != null" >
        create_user_name,
      </if>
      <if test="updateTime != null" >
        update_time,
      </if>
      <if test="updateUserId != null" >
        update_user_id,
      </if>
      <if test="updateUserName != null" >
        update_user_name,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="userId != null" >
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="userName != null" >
        #{userName,jdbcType=VARCHAR},
      </if>
      <if test="userCustId != null" >
        #{userCustId,jdbcType=VARCHAR},
      </if>
      <if test="planNid != null" >
        #{planNid,jdbcType=VARCHAR},
      </if>
      <if test="planOrderId != null" >
        #{planOrderId,jdbcType=VARCHAR},
      </if>
      <if test="borrowNid != null" >
        #{borrowNid,jdbcType=VARCHAR},
      </if>
      <if test="orderId != null" >
        #{orderId,jdbcType=VARCHAR},
      </if>
      <if test="orderDate != null" >
        #{orderDate,jdbcType=VARCHAR},
      </if>
      <if test="trxId != null" >
        #{trxId,jdbcType=VARCHAR},
      </if>
      <if test="unfreezeOrderId != null" >
        #{unfreezeOrderId,jdbcType=VARCHAR},
      </if>
      <if test="unfreezeOrderDate != null" >
        #{unfreezeOrderDate,jdbcType=VARCHAR},
      </if>
      <if test="amount != null" >
        #{amount,jdbcType=DECIMAL},
      </if>
      <if test="status != null" >
        #{status,jdbcType=TINYINT},
      </if>
      <if test="freezeType != null" >
        #{freezeType,jdbcType=TINYINT},
      </if>
      <if test="delFlag != null" >
        #{delFlag,jdbcType=TINYINT},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=INTEGER},
      </if>
      <if test="createUserId != null" >
        #{createUserId,jdbcType=INTEGER},
      </if>
      <if test="createUserName != null" >
        #{createUserName,jdbcType=VARCHAR},
      </if>
      <if test="updateTime != null" >
        #{updateTime,jdbcType=INTEGER},
      </if>
      <if test="updateUserId != null" >
        #{updateUserId,jdbcType=INTEGER},
      </if>
      <if test="updateUserName != null" >
        #{updateUserName,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.hyjf.am.trade.dao.model.auto.DebtFreezeExample" resultType="java.lang.Integer" >
    select count(*) from ht_debt_freeze
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update ht_debt_freeze
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.userId != null" >
        user_id = #{record.userId,jdbcType=INTEGER},
      </if>
      <if test="record.userName != null" >
        user_name = #{record.userName,jdbcType=VARCHAR},
      </if>
      <if test="record.userCustId != null" >
        user_cust_id = #{record.userCustId,jdbcType=VARCHAR},
      </if>
      <if test="record.planNid != null" >
        plan_nid = #{record.planNid,jdbcType=VARCHAR},
      </if>
      <if test="record.planOrderId != null" >
        plan_order_id = #{record.planOrderId,jdbcType=VARCHAR},
      </if>
      <if test="record.borrowNid != null" >
        borrow_nid = #{record.borrowNid,jdbcType=VARCHAR},
      </if>
      <if test="record.orderId != null" >
        order_id = #{record.orderId,jdbcType=VARCHAR},
      </if>
      <if test="record.orderDate != null" >
        order_date = #{record.orderDate,jdbcType=VARCHAR},
      </if>
      <if test="record.trxId != null" >
        trx_id = #{record.trxId,jdbcType=VARCHAR},
      </if>
      <if test="record.unfreezeOrderId != null" >
        unfreeze_order_id = #{record.unfreezeOrderId,jdbcType=VARCHAR},
      </if>
      <if test="record.unfreezeOrderDate != null" >
        unfreeze_order_date = #{record.unfreezeOrderDate,jdbcType=VARCHAR},
      </if>
      <if test="record.amount != null" >
        amount = #{record.amount,jdbcType=DECIMAL},
      </if>
      <if test="record.status != null" >
        `status` = #{record.status,jdbcType=TINYINT},
      </if>
      <if test="record.freezeType != null" >
        freeze_type = #{record.freezeType,jdbcType=TINYINT},
      </if>
      <if test="record.delFlag != null" >
        del_flag = #{record.delFlag,jdbcType=TINYINT},
      </if>
      <if test="record.createTime != null" >
        create_time = #{record.createTime,jdbcType=INTEGER},
      </if>
      <if test="record.createUserId != null" >
        create_user_id = #{record.createUserId,jdbcType=INTEGER},
      </if>
      <if test="record.createUserName != null" >
        create_user_name = #{record.createUserName,jdbcType=VARCHAR},
      </if>
      <if test="record.updateTime != null" >
        update_time = #{record.updateTime,jdbcType=INTEGER},
      </if>
      <if test="record.updateUserId != null" >
        update_user_id = #{record.updateUserId,jdbcType=INTEGER},
      </if>
      <if test="record.updateUserName != null" >
        update_user_name = #{record.updateUserName,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update ht_debt_freeze
    set id = #{record.id,jdbcType=INTEGER},
      user_id = #{record.userId,jdbcType=INTEGER},
      user_name = #{record.userName,jdbcType=VARCHAR},
      user_cust_id = #{record.userCustId,jdbcType=VARCHAR},
      plan_nid = #{record.planNid,jdbcType=VARCHAR},
      plan_order_id = #{record.planOrderId,jdbcType=VARCHAR},
      borrow_nid = #{record.borrowNid,jdbcType=VARCHAR},
      order_id = #{record.orderId,jdbcType=VARCHAR},
      order_date = #{record.orderDate,jdbcType=VARCHAR},
      trx_id = #{record.trxId,jdbcType=VARCHAR},
      unfreeze_order_id = #{record.unfreezeOrderId,jdbcType=VARCHAR},
      unfreeze_order_date = #{record.unfreezeOrderDate,jdbcType=VARCHAR},
      amount = #{record.amount,jdbcType=DECIMAL},
      `status` = #{record.status,jdbcType=TINYINT},
      freeze_type = #{record.freezeType,jdbcType=TINYINT},
      del_flag = #{record.delFlag,jdbcType=TINYINT},
      create_time = #{record.createTime,jdbcType=INTEGER},
      create_user_id = #{record.createUserId,jdbcType=INTEGER},
      create_user_name = #{record.createUserName,jdbcType=VARCHAR},
      update_time = #{record.updateTime,jdbcType=INTEGER},
      update_user_id = #{record.updateUserId,jdbcType=INTEGER},
      update_user_name = #{record.updateUserName,jdbcType=VARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.hyjf.am.trade.dao.model.auto.DebtFreeze" >
    update ht_debt_freeze
    <set >
      <if test="userId != null" >
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="userName != null" >
        user_name = #{userName,jdbcType=VARCHAR},
      </if>
      <if test="userCustId != null" >
        user_cust_id = #{userCustId,jdbcType=VARCHAR},
      </if>
      <if test="planNid != null" >
        plan_nid = #{planNid,jdbcType=VARCHAR},
      </if>
      <if test="planOrderId != null" >
        plan_order_id = #{planOrderId,jdbcType=VARCHAR},
      </if>
      <if test="borrowNid != null" >
        borrow_nid = #{borrowNid,jdbcType=VARCHAR},
      </if>
      <if test="orderId != null" >
        order_id = #{orderId,jdbcType=VARCHAR},
      </if>
      <if test="orderDate != null" >
        order_date = #{orderDate,jdbcType=VARCHAR},
      </if>
      <if test="trxId != null" >
        trx_id = #{trxId,jdbcType=VARCHAR},
      </if>
      <if test="unfreezeOrderId != null" >
        unfreeze_order_id = #{unfreezeOrderId,jdbcType=VARCHAR},
      </if>
      <if test="unfreezeOrderDate != null" >
        unfreeze_order_date = #{unfreezeOrderDate,jdbcType=VARCHAR},
      </if>
      <if test="amount != null" >
        amount = #{amount,jdbcType=DECIMAL},
      </if>
      <if test="status != null" >
        `status` = #{status,jdbcType=TINYINT},
      </if>
      <if test="freezeType != null" >
        freeze_type = #{freezeType,jdbcType=TINYINT},
      </if>
      <if test="delFlag != null" >
        del_flag = #{delFlag,jdbcType=TINYINT},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=INTEGER},
      </if>
      <if test="createUserId != null" >
        create_user_id = #{createUserId,jdbcType=INTEGER},
      </if>
      <if test="createUserName != null" >
        create_user_name = #{createUserName,jdbcType=VARCHAR},
      </if>
      <if test="updateTime != null" >
        update_time = #{updateTime,jdbcType=INTEGER},
      </if>
      <if test="updateUserId != null" >
        update_user_id = #{updateUserId,jdbcType=INTEGER},
      </if>
      <if test="updateUserName != null" >
        update_user_name = #{updateUserName,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.hyjf.am.trade.dao.model.auto.DebtFreeze" >
    update ht_debt_freeze
    set user_id = #{userId,jdbcType=INTEGER},
      user_name = #{userName,jdbcType=VARCHAR},
      user_cust_id = #{userCustId,jdbcType=VARCHAR},
      plan_nid = #{planNid,jdbcType=VARCHAR},
      plan_order_id = #{planOrderId,jdbcType=VARCHAR},
      borrow_nid = #{borrowNid,jdbcType=VARCHAR},
      order_id = #{orderId,jdbcType=VARCHAR},
      order_date = #{orderDate,jdbcType=VARCHAR},
      trx_id = #{trxId,jdbcType=VARCHAR},
      unfreeze_order_id = #{unfreezeOrderId,jdbcType=VARCHAR},
      unfreeze_order_date = #{unfreezeOrderDate,jdbcType=VARCHAR},
      amount = #{amount,jdbcType=DECIMAL},
      `status` = #{status,jdbcType=TINYINT},
      freeze_type = #{freezeType,jdbcType=TINYINT},
      del_flag = #{delFlag,jdbcType=TINYINT},
      create_time = #{createTime,jdbcType=INTEGER},
      create_user_id = #{createUserId,jdbcType=INTEGER},
      create_user_name = #{createUserName,jdbcType=VARCHAR},
      update_time = #{updateTime,jdbcType=INTEGER},
      update_user_id = #{updateUserId,jdbcType=INTEGER},
      update_user_name = #{updateUserName,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>